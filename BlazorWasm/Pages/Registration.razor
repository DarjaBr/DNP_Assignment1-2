@page "/Registration"
@using BlazorWasm.Services
@using global::Shared.Dtos
@using global::Shared.Models
@inject IAuthService authService
@inject NavigationManager navMgr

<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <h3>Registration</h3>
            <div class="field">
                <label>User name:</label>
                <input type="text" @bind="userName"/>
            </div>
            <div class="field">
                <label>Email:</label>
                <input type="text" @bind="email"/>
            </div>
            <div class="field">
                <label>Role:</label>
                <input type="text" @bind="role"/>
            </div>
            <div class="field">
                <label style="text-align: center">Password:</label>
                <input type="password" @bind="passSec"/>
            </div>
            <div class="field">
                <label style="text-align: center">Password Again:</label>
                <input type="password" @bind="password"/>                                       
            </div>
            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @errorLabel
                    </label>
                </div>
            }
            else
            {
                <div class="field">
                    <label style="color: #03c203">
                        @successLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="loginbtn" @onclick="RegisterAsync">Registration</button>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string userName;
    private string password;
    private string email;
    private string domain;
    private string name;
    private string role;
    private string passSec;
    private string errorLabel;
    private string successLabel;

    private async Task RegisterAsync()
    {
        errorLabel = "";
        try
        {
            User regUser = new User();
            regUser.Username = userName;
            regUser.Email = email;
            regUser.Domain = "VIA";
            regUser.Name = "name";
            regUser.Role = role;
            if (passSec.Equals(password))
            {
                regUser.Password = password;
            }
            else
            {
                throw new Exception("Passwords are not the same!");
            }
            
            await authService.RegisterAsync(regUser);
            successLabel = $"Registration was successful {userName}!";
            //navMgr.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
        
    }
}